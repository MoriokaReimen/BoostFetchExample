cmake_minimum_required(VERSION 3.20...3.23)

project(19-boost-file-system CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)
set(CMAKE_ENABLE_EXPORTS OFF)

include(FetchContent)
set(BOOST_REQD_SUBMODULES
algorithm
align
any
array
asio
assert
assign
atomic
beast
bimap
bind
callable_traits
chrono
circular_buffer
compatibility
compute
concept_check
config
container
container_hash
context
contract
conversion
convert
core
coroutine
coroutine2
crc
date_time
describe
detail
dll
dynamic_bitset
endian
exception
fiber
filesystem
flyweight
foreach
format
function
function_types
functional
fusion
geometry
gil
graph
hana
heap
histogram
hof
icl
integer
interprocess
intrusive
io
iostreams
iterator
json
lambda
lambda2
leaf
lexical_cast
local_function
locale
lockfree
log
logic
math
metaparse
move
mp11
mpl
msm
multi_array
multi_index
multiprecision
nowide
optional
outcome
parameter
pfr
phoenix
poly_collection
polygon
pool
predef
preprocessor
process
program_options
property_map
property_tree
proto
ptr_container
qvm
random
range
ratio
rational
regex
scope_exit
serialization
signals2
smart_ptr
sort
spirit
statechart
static_assert
static_string
stl_interfaces
system
thread
throw_exception
timer
tokenizer
tti
tuple
type_erasure
type_index
type_traits
typeof
units
unordered
utility
uuid
variant
variant2
vmd
wave
winapi
xpressive
yap)

set(BOOST_LIBRARIES
Boost::algorithm
Boost::align
Boost::any
Boost::array
Boost::asio
Boost::assert
Boost::assign
Boost::atomic
Boost::beast
Boost::bimap
Boost::bind
Boost::callable_traits
Boost::chrono
Boost::circular_buffer
Boost::compatibility
Boost::compute
Boost::concept_check
Boost::config
Boost::container
Boost::container_hash
Boost::context
Boost::contract
Boost::conversion
Boost::convert
Boost::core
Boost::coroutine
Boost::coroutine2
Boost::crc
Boost::date_time
Boost::describe
Boost::detail
Boost::dll
Boost::dynamic_bitset
Boost::endian
Boost::exception
Boost::fiber
Boost::filesystem
Boost::flyweight
Boost::foreach
Boost::format
Boost::function
Boost::function_types
Boost::functional
Boost::fusion
Boost::geometry
Boost::gil
Boost::graph
Boost::hana
Boost::heap
Boost::histogram
Boost::hof
Boost::icl
Boost::integer
Boost::interprocess
Boost::intrusive
Boost::io
Boost::iostreams
Boost::iterator
Boost::json
Boost::lambda
Boost::lambda2
Boost::leaf
Boost::lexical_cast
Boost::local_function
Boost::locale
Boost::lockfree
Boost::log
Boost::logic
Boost::math
Boost::metaparse
Boost::move
Boost::mp11
Boost::mpl
Boost::msm
Boost::multi_array
Boost::multi_index
Boost::multiprecision
Boost::nowide
Boost::optional
Boost::outcome
Boost::parameter
Boost::pfr
Boost::phoenix
Boost::poly_collection
Boost::polygon
Boost::pool
Boost::predef
Boost::preprocessor
Boost::process
Boost::program_options
Boost::property_map
Boost::property_tree
Boost::proto
Boost::ptr_container
Boost::qvm
Boost::random
Boost::range
Boost::ratio
Boost::rational
Boost::regex
Boost::scope_exit
Boost::serialization
Boost::signals2
Boost::smart_ptr
Boost::sort
Boost::spirit
Boost::statechart
Boost::static_assert
Boost::static_string
Boost::stl_interfaces
Boost::system
Boost::thread
Boost::throw_exception
Boost::timer
Boost::tokenizer
Boost::tti
Boost::tuple
Boost::type_erasure
Boost::type_index
Boost::type_traits
Boost::typeof
Boost::units
Boost::unordered
Boost::utility
Boost::uuid
Boost::variant
Boost::variant2
Boost::vmd
Boost::wave
Boost::winapi
Boost::xpressive
Boost::yap)

set(BOOST_INCLUDE_LIBRARIES ${BOOST_REQD_SUBMODULES}) # enabled libraries
set(BOOST_ENABLE_CMAKE ON) # CMake support
FetchContent_Declare(Boost
  GIT_REPOSITORY https://github.com/boostorg/boost.git
  GIT_TAG boost-1.80.0
  GIT_PROGRESS TRUE
)
FetchContent_MakeAvailable(Boost)

FetchContent_Declare(CGAL
  URL https://github.com/CGAL/cgal/releases/download/v5.5.1/CGAL-5.5.1-library.zip 
)
FetchContent_Populate(CGAL)
add_library(cgal INTERFACE)
add_library(CGAL::CGAL ALIAS cgal)
target_include_directories(cgal 
    INTERFACE ${cgal_SOURCE_DIR}/include)
target_link_libraries(cgal INTERFACE ${BOOST_LIBRARIES})

file(GLOB SRC ${CMAKE_CURRENT_LIST_DIR}/src/*.cpp)
add_executable(sample ${SRC})
target_link_libraries(sample CGAL::CGAL)
